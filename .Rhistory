tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
get_prism_dailys(type="ppt",
dates="2017-11-13",
keepZip = TRUE)
# these are for the WSI index; for year n-1
years<-c(2017)
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
k<-1
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# these are for the WSI index; for year n-1
years<-c(2018)
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
k<-1
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# these are for the WSI index; for year n-1
years<-c(2018)
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
k<-1
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# these are for the WSI index; for year n-1
years<-c(seq(2002, 2022, 1))
# these are for the WSI index; for year n-1
years<-c(seq(2018, 2022, 1))
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
k<-1
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# use this for setting the directory for prism
prism_set_dl_dir("C:\\Users\\jackx\\Desktop\\prism-dat-f", create=FALSE)
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# these are for the WSI index; for year n-1
years<-c(2019)
# get the spat data into the same CRS
wiTwnShpSpat<-spTransform(wiTwnShpSpat, crs(wiCountyShp))
# get the spat data into the same CRS
wiTwnShpSpat<-spTransform(wiTwnShpSpat, crs(wiCountyShp))
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
k<-1
for(i in 1:length(years)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnShpSpat,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnShpSpat,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnShpSpat,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)))){
# note that PRISM data is reported in MM; need CM divide by 10
avgPPT <- mean(pptVals) / 10 # average ppt for a given township for day k
avgTMin <- mean(tminVals) # average min. temp for a given township for day k
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
if(cumPPT > 0 & avgTmp > 0){
# from Dawe and Boutin 2012 Journal of Wildlife Research
meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
}
if((cumPPT < pptThrshld & avgTMin > tminThrshld) ||
(cumPPT > pptThrshld & avgTMin < tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
# constants for calculating WSI
tminThrshld <- -17.7 # number used by MNDNR
tmaxThrshld <- 0
pptThrshld <- 38 # 38 cm cited
# can set our month condition here for different measures of WSI
minDay <- '11-01' # november 1
maxDay <- '05-10' # may 10
# these are for the WSI index; for year n-1
years<-c(seq(2018,2022,1))
