# geoDistance(P1, P2, earth.earth.radiusius)
p1<-c(87.63, 41.88)# chicago
p1<-p1*(pi/180)
p2<-c(93.22, 44.89) # mpls
p2<-p2*(pi/180)
p3<-c(73.97, 40.78) # NY
p3<-p3*(pi/180)
p4<-c(90.25, 29.98) # New orleans
p4<-p4*(pi/180)
print(paste("mpls to Chicago:", geoDistance(p1, p2, earth.radius)))
print(paste("NY to new orleans: ", geoDistance(p3, p4, earth.radius)))
eucDistance<-function(P1, P2, earthRadius){
p1<-earthRadius*P1
p2<-earthRadius*P2
sqrt((((p2[1]-p1[1])^2)+((p2[2]-p1[2])^2)))
}
eucDistance(p1,p2,earth.radius)
eucDistance(p3,p4,earth.radius)
ch<-c(87.63, 41.88) # chicago
mpls<-c(93.22, 44.89) # mpls
ny<-c(73.97, 40.78) # NY
no<-c(90.25, 29.98) # New orleans
chordalDistance<-function(P1, P2, earthRadius){
theta<-c(P1[1], P2[1])
#print(theta)
labmda<-c(P1[2], P2[2])
#print(labmda)
# x coord
x<-earthRadius*(cos(theta)*cos(labmda))
# y coord
y<-earthRadius*((cos(theta)*sin(labmda)))
# z coord
z<-earthRadius*(sin(theta))
sqrt(((x[1]-x[2])^2)+((y[2]-y[1])^2)+((z[2]-z[1])^2))
}
chordalDistance(p1,p2,earth.radius)
chordalDistance(p3,p4,earth.radius)
library(fields)
earth.radius = 6371
geoDistance<-function(P1, P2, earthRadius){
earthRadius*acos(((sin(P1[1])*sin(P2[1])) + (cos(P1[1])*cos(P2[1])*cos(P1[2] - P2[2]))))
}
# test
# geoDistance(P1, P2, earth.earth.radiusius)
p1<-c(87.63, 41.88)# chicago
p1<-p1*(pi/180)
p2<-c(93.22, 44.89) # mpls
p2<-p2*(pi/180)
p3<-c(73.97, 40.78) # NY
p3<-p3*(pi/180)
p4<-c(90.25, 29.98) # New orleans
p4<-p4*(pi/180)
print(paste("mpls to Chicago:", geoDistance(p1, p2, earth.radius)))
print(paste("NY to new orleans: ", geoDistance(p3, p4, earth.radius)))
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
diagnostics(out)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
out
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
out<-ode(times=times, y=yini, func=rossler.eq, parms=NULL,method="lsoda")
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
y1
yini
yini$y1
yini[y1]
yini['y1']
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
out
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
out
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/main-new.r", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
?tapply()
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
plot(farm.full)
?st_buffer
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
plot(farm.full)
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cervid-farm/Cervid-Farm/R_Scripts/buffer-fencline-rand-pt.r", echo=TRUE)
library(nimble)
library(coda)
library(spBayes)
library(geoR)
library(maptools)
library(rgdal)
## Data management
data(BEF.dat)
BEF.dat <- BEF.dat[BEF.dat$ALLBIO02_KGH>0,]
bio <- BEF.dat$ALLBIO02_KGH*0.001;
log.bio <- log(bio)
coords <- as.matrix(BEF.dat[,c("XUTM","YUTM")])
## for prediction
BEF.shp <- readOGR("./BEF-data/BEF_bound.shp")
shp2poly <- BEF.shp@polygons[[1]]@Polygons[[1]]@coords
BEF.poly <- as.matrix(shp2poly)
BEF.grids <- readGDAL("./BEF-data/dem_slope_lolosptc_clip_60.img")
pred.covars <- cbind(BEF.grids[["band1"]],
BEF.grids[["band2"]],
BEF.grids[["band3"]],
BEF.grids[["band4"]],
BEF.grids[["band5"]])
pred.covars <- cbind(rep(1, nrow(pred.covars)), pred.covars)
pred.coords <- SpatialPoints(BEF.grids)@coords
pointsInPolyOut <- pointsInPoly(BEF.poly, pred.coords)
pred.covars <- pred.covars[pointsInPolyOut,]
pred.coords <- pred.coords[pointsInPolyOut,]
## We first define nimble function to calculate covariance matrix
## for a given (exponential) covariance function
expcov <- nimbleFunction(
run = function(dist=double(2), phi=double(0), sigma2=double(0), tau2=double(0)) {
returnType(double(2))
n <- dim(dist)[1]
result <- matrix(nrow = n, ncol = n, init = FALSE)
for(i in 1:n) for(j in 1:n){
result[i, j] <- sigma2*exp(-dist[i,j]*phi)+tau2*equals(i,j)
}
return(result)
})
cExpcov <- compileNimble(expcov)
## Specify the hierarchical model
befcode <- nimbleCode({
# likelihood
for(i in 1:N) {mu[i] <- inprod(X[i,1:p],beta[1:p]) }
Sigma[1:N,1:N] <- expcov(dist[1:N,1:N],phi,sigma2,tau2)
Omega1[1:N1,1:N1] <- inverse(Sigma[1:N1,1:N1])
Y1[1:N1] ~ dmnorm(mu[1:N1], Omega1[1:N1,1:N1])
# prior
for(i in 1:p) {beta[i] ~ dnorm(0.0, sd=100)}
tau2 ~ dinvgamma(2,0.02)
sigma2 ~ dinvgamma(2,0.08)
phi ~ dunif(0.002,0.06)
# prediction
# mu0C[1:N0] <- mu[(N1+1):N] + Sigma[(N1+1):N,1:N1] %*% Omega1[1:N1,1:N1] %*% (Y1[1:N1]-mu[1:N1])
tmp[1:N0] <- Sigma[(N1+1):N,1:N1] %*% Omega1[1:N1,1:N1] %*% (Y1[1:N1]-mu[1:N1])
mu0C[1:N0] <- mu[(N1+1):N] + tmp[1:N0]
Sigma0C[1:N0,1:N0] <- Sigma[(N1+1):N,(N1+1):N] - Sigma[(N1+1):N,1:N1] %*% Omega1[1:N1,1:N1] %*%  Sigma[1:N1,(N1+1):N]
Y0[1:N0] ~ dmnorm(mu0C[1:N0],cov=Sigma0C[1:N0,1:N0])
})
## Specify data and initial values using lm estimators
## considering computational speed, we randomly select 100 points for model fitting
set.seed(9999)
rsamp <- sample(1:nrow(BEF.dat),100)
X1 <- as.matrix(cbind(1,BEF.dat[rsamp,c("ELEV","SLOPE","SUM_02_TC1","SUM_02_TC2","SUM_02_TC3")]))
Y1 <- log.bio[rsamp]
N1 <- nrow(X1)
p <- ncol(X1)
set.seed(999)
rpred <- sample(1:nrow(pred.covars),10)
X0 <- pred.covars[rpred,]
N0 <- nrow(X0)
X <- rbind(X1,X0)
dist <- iDist(rbind(coords[rsamp,],pred.coords[rpred,]))
constants <- list(N1=N1,N0=N0,N=N1+N0,p=p,X=X,dist=dist)
data <- list(Y1=Y1)
inits <- list(beta=summary(lm(Y1 ~ X1-1))$coef[,1], phi=3/200, sigma2=1, tau2=1)
## Build and Compile model
befModel <- nimbleModel(befcode, constants = constants, data = data, inits = inits)
cbefModel <- compileNimble(befModel)
confMC <- configureMCMC(befModel, monitors = c("beta","phi","sigma2","tau2","Y0"))
befMCMC <- buildMCMC(confMC)
cbefMCMC <- compileNimble(befMCMC, project = cbefModel)
## Run MCMC
MCMC.out <- runMCMC(cbefMCMC, niter=20000, nburnin=10000, nchains=3)
### convergence diagnosis
post.samples <- mcmc.list(sapply(MCMC.out,as.mcmc,simplify=FALSE))
plot(post.samples, trace=TRUE, density=FALSE)
gelman.plot(post.samples)
autocorr.plot(post.samples)
crosscorr(post.samples[,paste0("beta[",1:6,"]")])
## posterior summary
summary(post.samples)
X0
repred
rpred
X1
Y1
rsamp
log.bio
nrow(BEF.dat)
nrow(pred.covars)
repred
rpred
X1
X0
nrow(X0)
nrow(X1)
X
X0
ncol(X1)
names(X1)
colnames(X1)
?spPredict
getwd()
setwd("C:/Users/jackx/Desktop/cwd-project-2")
read.table(
"cwd-plus-2010-2023",
sep=",", header=TRUE)
read.table(
"cwd-plus-2010-2023.csv",
sep=",", header=TRUE)
read.table(
"./data/cwd-plus-2010-2023.csv",
sep=",", header=TRUE)
cwd.plus.dat<-read.table(
"./data/cwd-plus-2010-2023.csv",
sep=",", header=TRUE)
names(cwd.plus.dat)
head(cwd.plus.dat)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
head(cwd.dat)
cwd.dat <- subset(cwd.dat, year >= 2016)
names(cwd.dat)[i] <- tolower(names(cwd.dat)[i])
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
names(cwd.dat)[1]
cwd.dat
head(cwd.dat)
nrow(cwd.dat)
unique(cwd.dat$sample_acquisition)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat[i,j] <- tolower(cwd.dat <-[i,j])
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
names(cwd.dat[1])
names(cwd.dat[2])
names(cwd.dat[3])
names(cwd.dat[4])
names(cwd.dat[5])
names(cwd.dat[6])
names(cwd.dat)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat
nrow(cwd.dat)
source("C:/Users/jackx/Desktop/cwd-project-2/subset-shapes.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/subset-shapes.r", echo=TRUE)
plot(deer.mgmt.shp)
deer.mgmt.shp
names(deer.mgmt.shp)
names(deer.mgmt.shp$MANAGEMENT)
names(deer.mgmt.shp$DiseMgmt)
deer.mgmt.shp$DiseMgmt
unique(deer.mgmt.shp$DiseMgmt)
?contains
deer.mgmt.shp <- subset(deer.mgmt.shp, !is.na(DiseMgmt))
plot(deer.mgmt.shp)
deer.mgmt.shp <- subset(deer.mgmt.shp, DiseMgmt == "CWD control zone")
plot(deer.mgmt.shp)
# C:\Users\jackx\Desktop\cervid-farm\Deb-Holthaus
# read in raster
deer.mgmt.shp<-st_read("./data/shapefiles/shp_bdry_deer_permit_areas/mn_deer_permit_areas.shp")
deer.mgmt.shp
deer.mgmt.shp$MANAGEMENT
deer.mgmt.shp$DiseSamp
cwd.test.mand.shp <- subset(deer.mgmt.shp, DiseSmp %>% contains("MANDATORY"))
cwd.test.mand.shp <- subset(deer.mgmt.shp, DiseSamp %>% contains("MANDATORY"))
cwd.test.mand.shp <- subset(deer.mgmt.shp, DiseSamp %>% select(contains("MANDATORY")))
cwd.test.mand.shp <- subset(deer.mgmt.shp, grepl("MANDATORY", DiseSamp))
plot(cwd.test.mand.shp)
?grepl
cwd.test.mand.shp <- subset(deer.mgmt.shp, "MANDATORY" %in% DiseSamp)
plot(cwd.test.mand.shp)
cwd.test.mand.shp <- deer.mgmt.shp[deer.mgmt.shp$DiseSamp %like% "MANDATORY"]
install.packages("data.table")
library(data.table)
cwd.test.mand.shp <- deer.mgmt.shp[deer.mgmt.shp$DiseSamp %like% "MANDATORY"]
plot(cwd.test.mand.shp)
cwd.test.mand.shp <- deer.mgmt.shp[rownames(deer.mgmt.shp$DiseSamp) %like% "MANDATORY"]
plot(cwd.test.mand.shp)
cwd.test.mand.shp <- deer.mgmt.shp[rownames(deer.mgmt.shp$DiseSamp) %like% "MANDATORY",]
plot(cwd.test.mand.shp)
cwd.mgmt.zones<-c(604,605,643,645,646,647,648,649,655,661,679)
names(deer.mgmt.shp)
head(deer.mgmt.shp$ZONE_)
cwd.test.mand.shp <- subset(deer.mgmt.shp, ZONE_ %in% cwd.mgmt.zones)
plot(cwd.test.mand.shp)
cwd.test.mand.shp <- subset(deer.mgmt.shp, ZONE_ == cwd.mgmt.zones)
cwd.test.mand.shp <- subset(deer.mgmt.shp, ZONE_ == 604 | ZONE_ == 605 | ZONE_ == 643 | ZONE_ == 645 | ZONE_ == 646 | ZONE_ == 647 | ZONE_ == 648 | ZONE_ == 649 | ZONE_ == 655 | ZONE_ == 661 | ZONE_ == 679)
plot(cwd.mgmt.zones)
plot(cwd.test.mand.shp)
deer.mgmt.shp$ZONE_
cwd.test.mand.shp <- subset(deer.mgmt.shp, ZONE_ == 600)
plot(cwd.test.mand.shp)
names(cwd.test.mand.shp)
head(cwd.test.mand.shp, 1)
head(cwd.test.mand.shp$MANAGEMENT, 1)
head(cwd.test.mand.shp$DPA, 1)
(deer.mgmt.shp, DPA == 604 | DPA == 605 | DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655 | DPA == 661 | DPA == 679)
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 604 | DPA == 605 | DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655 | DPA == 661 | DPA == 679)
plot(cwd.test.mand)
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655 | DPA == 661 | DPA == 679)
plot(cwd.test.mand)
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655)
plot(cwd.test.mand)
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655 | DPA == 661 )
plot(cwd.test.mand)
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655)
plot(cwd.test.mand)
# subset into our SE region
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655)
plot(cwd.test.mand)
select(deer.mgmt.shp, MANAGEMENT,)
cwd.test.mand.m]<-select(deer.mgmt.shp, MANAGEMENT)
cwd.test.mand.m<-select(deer.mgmt.shp, MANAGEMENT)
plot(cwd.test.mand.m)
# subset into our SE region
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655)
cwd.test.mand<-select(cwd.test.mand, MANAGEMENT)
plot(cwd.test.mand)
# subset into our SE region
cwd.test.mand<-subset(deer.mgmt.shp, DPA == 643 | DPA == 645 | DPA == 646 | DPA == 647 | DPA == 648 | DPA == 649 | DPA == 655)
names(cwd.test.mand)
# now let's break this from a multipolygon to a polygon
plot(cwd.test.mand$DPA)
# now let's break this from a multipolygon to a polygon
plot(cwd.test.mand)
head(cwd.test.mand$Designatio)
head(cwd.test.mand)
setwd("C:/Users/jackx/Desktop/cwd-project-2")
source('subset-shapes')
source('process-data')
source('subset-shapes')
source('process-data.r')
source('subset-shapes.r')
cwd.dat
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
names(cwd.dat)
cwd.dat$town
cwd.dat$section
?facet_grid
names(cwd.dat)
ggplot(data=cwd.dat, aes(x=year))+
geom_histogram(x=year) +
facet_grid(sex ~ .)
ggplot(data=cwd.dat, aes(~year))+
geom_histogram() +
facet_grid(sex ~ .)
ggplot(data=cwd.dat, aes(year))+
geom_histogram() +
facet_grid(sex ~ .)
unique(cwd.dat$sample_acquisition)
unique(cwd.dat$sample_category)
# next let's get rid of capital letters in the data itself
cwd.dat <- subset(cwd.dat, sample_acquisition == "Hunter harvested" & sample_category != "Targeted")
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
cwd.dat
unique(cwd.dat$sample_category)
# next let's get rid of capital letters in the data itself
cwd.dat <- subset(cwd.dat, sample_acquisition == "Hunter harvested" & sample_category != "Targeted")
unique(cwd.dat$sample_category)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/subset-shapes.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/subset-shapes.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/explore-dat.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat
unique(cwd.dat$permit_area)
source("C:/Users/jackx/Desktop/cwd-project-2/process-data.r", echo=TRUE)
cwd.dat
nrow(cwd.dat)
twnshp.shp<-st_read("./data/shapefiles/shp_bdry_mn_city_township_unorg/city_township_unorg.shp")
names(twnshp.shp)
head(twnshp.shp)
# now let's break this from a multipolygon to a polygon
plot(twnshp.shp)
trs.shp<-st_read("./data/shapefiles/shp_plan_mngeo_trs/trs.shp")
names(trs)
names(trs.shp)
unique(cwd.dat$county)
head(trs.shp$COUN, 10)
head(trs.shp, 1)
head(trs.shp$COUN_UC, 1)
select(trs.shp, COUN_UC == "OLMSTED")
filter(trs.shp, COUN_UC == "OLMSTED")
unique(cwd.dat$county)
# now let's break this from a multipolygon to a polygon
trs.cwd.mgmt.shp <-subset(trs.shp, COUN_UC == "FILLMORE" | COUN_UC == "HOUSTON" |
COUN_UC == "OLMSTED" | COUN_UC == "WINONA")
plot(trs.cwd.mgmt.shp)
head(cwd.dat)
trs.cwd.mgmt.shp
select(trs.cwd.mgmt.shp, COUNTY_UC, COUN)
select(trs.cwd.mgmt.shp, COUN_UC, COUN)
unique(trs.cwd.shp[c("COUN_UC", "COUN")])
unique(trs.cwd.mgmt.shp[c("COUN_UC", "COUN")])
red <- select(trs.cwd.mgmt.shp, COUN, COUN_UC)
red
unique(red[c("COUN_UC", "COUN")])
subset(trs.cwd.mgmt.shp, COUN_UC=='OLMSTED')
subset(trs.cwd.mgmt.shp, COUN_UC=='HOUSTON')
subset(trs.cwd.mgmt.shp, COUN_UC="FILLMORE")
subset(trs.cwd.mgmt.shp, COUN_UC=='WINONA')
subset(trs.cwd.mgmt.shp, COUN_UC=='FILLMORE')
trs.cwd.mgmt.shp[1]
trs.cwd.mgmt.shp[1]$geometry
cwd.dat$county
fips.coun <- c()
for( i in 1:nrow(cwd.dat)){
if(cwd.dat$county == 'Fillmore'){
fips.coun[i] <- 45
}
if(cwd.dat$county == 'Winona'){
fips.coun[i] <- 169
}
if(cwd.dat$county == 'Olmsted'){
fips.coun[i] <- 109
}
if(cwd.dat$county == 'Houston'){
fips.coun[i] <- 55
}
}
cwd.dat[1,]$county
for( i in 1:nrow(cwd.dat)){
if(cwd.dat[i,]$county == 'Fillmore'){
fips.coun[i] <- 45
}
if(cwd.dat[i,]$county == 'Winona'){
fips.coun$county[i] <- 169
}
if(cwd.dat[i,]$county == 'Olmsted'){
fips.coun[i] <- 109
}
if(cwd.dat[i,]$county == 'Houston'){
fips.coun[i] <- 55
}
}
fips.coun <- c()
for( i in 1:nrow(cwd.dat)){
if(cwd.dat[i,]$county == 'Fillmore'){
fips.coun[i] <- 45
}
if(cwd.dat[i,]$county == 'Winona'){
fips.coun[i] <- 169
}
if(cwd.dat[i,]$county == 'Olmsted'){
fips.coun[i] <- 109
}
if(cwd.dat[i,]$county == 'Houston'){
fips.coun[i] <- 55
}
}
cwd.dat$fips_coun <- fips.coun
cwd.dat
typeof(trs.cwd.mgmt.shp)
trs.cwd.mgmt.shp
