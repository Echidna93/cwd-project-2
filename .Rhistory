use_virtualenv(virtualenv="image-recog")
# configure python
# create our venv
library(reticulate)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
use_virtualenv(envname = "image-recog", version=NULL)
#Sys.setenv(RETICULATE_PYTHON='/c/Users/jackx/AppData/Python/Python310')
use_virtualenv(envname = "image-recog")
# use_virtualenv(envname = "image-recog")
# first time set up for our venv
use_python(py_config()$pythonhome)
# library(tensorflow)
virtualenv_create("image-recog")
virtualenv_install("image-recog", "tensorflow")
virtualenv_install("image-recog", "keras")
library(tensorflow)
library(keras)
# verify our installation
tf$constant('hellow')
library(tensorflow)
# verify our installation
tf$constant('hellow')
label_list <- dir('images/train/')
output_n <- length(label_list)
save(label_list, file="label_list.R")
# rescale and normalize our image sizes
width <- 224
height <- 224
target_size <- c(width, height)
rgb <- 3
path_train <- "images/train/"
train_data_gen <- image_data_generator(rescale = 1/255,
validation_split=0.2)
install_tensorflow()
use_condaenv("image-recog")
library(keras)
library(keras)
library(tensorflow)
install_tensorflow()
# configure python
# create our venv
library(reticulate)
virtualenv_remove("image-recog")
y
Y
# configure python
# create our venv
library(reticulate)
# library(tensorflow)
virtualenv_create("image-recog")
library(tensorflow)
library(keras)
install_tensorflow()
install_tensorflow(envname = 'image-recog')
virtualenv_remove('image-recog')
Y
library(reticulate)
# use_virtualenv(envname = "image-recog")
# first time set up for our venv
use_python(py_config()$pythonhome)
# library(tensorflow)
virtualenv_create("image-recog")
library(tensorflow)
library(tensorflow)
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
install.packages("keras")
virtualenv_remove("image-recog")
Y
# rename files
path = "F:\\w\\S01\\A09C\\100EK113"
files<-list.files(path)
files
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
?file.rename
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
files
# rename files
path = "F:\\w\\S01\\A09C\\101EK113"
files<-list.files(path)
files
# rename files
path = "F:\\w\\S01\\A09C\\100EK113"
files<-list.files(path)
files
for(i in 1:length(files)){
file.rename(paste0(path, "\\", files[i]),
paste0(path, "\\", paste0("w", "S01","A09C","B1", i, sep="-")))
}
path = "F:\\w\\S01\\A09C\\101EK113"
files<-list.files(path)
for(i in 1:length(files)){
file.rename(paste0(path, "\\", files[i]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i)))
}
path = "F:\\w\\S01\\A09C\\102EK113"
files<-list.files(path)
file.rename(paste0(path, "\\", files[1]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i)))
file.rename(paste0(path, "\\", files[2]),
paste0(path, "\\",
paste0("w","-", "S01", "-","A09C","-","B1", i, ".JPG")))
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
path = "F:\\w\\S01\\A17\\100EK113"
path.s<-strsplit(path)
path.s<-strsplit(path, split="\\")
path.s
strsplit
?strsplit
path.s<-strsplit(path, split="\\")
path = "F:\\w\\S01\\A17C\\100EK113"
path.split<-strsplit(path, "\\\\")
path.split
path.split[1]
path.split[[1]]
path.split[[1]][1]
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/r-scripts/rename-files.R", echo=TRUE)
source("C:/Users/jackx/Desktop/image-recog/image-recog.R", echo=TRUE)
library(prism)
prism_archive_subset("tmin", "daily")
?prism_archive_subset
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-datf")
?prism_get_dl_dir
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-dat-
f")
prism_get_dl_dir("C:/Users/jackx022/Desktop/prism-dat-f")
prism_get_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_get_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f",
create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f",
create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_set_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_archive_subset("tmin", "daily")
?prism_archive_subset
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
prism_archive_subset("tmin",
"daily")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily")
p
prism_get_dl_dir()
prism_archive_verify()
prism_archive_verify("tmin")
?prism_archive_verify
prism_archive_verify("tmin", "daily")
?prism_archive_subset
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily",
minDate="1999-11-01",
maxDate="2022-05-31")
p
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
minDate="1999-11-01",
maxDate="2022-05-31")
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
p<-prism_archive_subset("tmin",
"daily",
minDate="1999-11-01",
maxDate="2022-05-31")
p
prism_arhive_ls()
prism_archive_ls()
prism_set_dl_dir("C:\\Users\\jackx022\\Desktop\\prism-dat-f", create=FALSE)
prism_archive_ls()
# grab our prism data
# first we need to set our path for where we want prism to store the data
prism_set_dl_dir('C:\\Users\\jackx\\Desktop\\prism-dat-f') # only set to create =TRUE if we need to download again
library(prism)
# grab our prism data
# first we need to set our path for where we want prism to store the data
prism_set_dl_dir('C:\\Users\\jackx\\Desktop\\prism-dat-f') # only set to create =TRUE if we need to download again
get_prism_dailys(type="tmin",
minDate="1999-11-01",
maxDate="2022-05-31",
keepZip = TRUE)
get_prism_dailys(type="tmin",
minDate="2012-11-01",
maxDate="2022-05-31",
keepZip = TRUE)
?prism_archive_subset
var(7,1,2,5)
var(c(7,1,2,5))
cov(c(7,1,2,5),c(8,3,5,2))
setwd("C:/Users/jackx/Desktop/writing-sample")
knitr::opts_chunk$set(echo = FALSE)
wiShp<-st_read("./data/shapefiles/Wisconsin_State_Boundary_24K/Wisconsin_State_Boundary_24K.shp")
library("rgdal")
library("raster")
library("sf")
library("leafsync")
library("dplyr")
library("ggplot2")
library("stars")
library(spatialEco)
library(spatstat.random)
setwd("C:/Users/jackx/Desktop/cwd-project-2")
library(data.table)
library(geoR)
library(RColorBrewer)
library(spdep)
library(spatialreg)
library(classInt)
library(rgeos)
library(landscapemetrics)
library(nimble)
library(coda)
library(prism)
library(terra)
library(maps)
library(raster)
wiShp<-st_read("./data/shapefiles/Wisconsin_State_Boundary_24K/Wisconsin_State_Boundary_24K.shp")
wiTwnshpShp <- st_read("./data/shapefiles/PLSS_Townships/PLSS_Townships.shp")
# use this for setting the directory for prism
prism_set_dl_dir("C:\\Users\\jackx\\Desktop\\prism-dat-f", create=FALSE)
# get_prism_dailys(type="ppt",
#                 minDate="2018-01-01",
#                 maxDate="2022-05-31",
#                 keepZip = TRUE)
# get_prism_dailys(type="tmax",
#                  minDate="2000-11-01",
#                  maxDate="2022-05-31",
#                  keepZip = TRUE)
# get_prism_dailys(type="tmin",
#                  minDate="2000-11-01",
#                  maxDate="2022-05-31",
#                  keepZip = TRUE)
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
wiShp<-st_read("./data/shapefiles/PLSS_Townships/PLSS_Townships.shp")
wiCountyShp <- st_read("./data/shapefiles/County_Boundaries_24K/County_Boundaries_24K.shp")
wiLC<-rast("./data/raster/wiscland2/wiscland2_dataset/level4/wiscland2_level4.tif")
# DON'T DELETE; only for getting
pdStackRaw<-pd_stack(prism_archive_subset("ppt",
"monthly",
years=2001))
# looking at only at Iowa County
#wiCountyShp<-subset(wiCountyShp,wiCountyShp$COUNTY_NAM == "Iowa")
wiShp.e<-projectExtent(wiCountyShp, pdStackRaw)
# great now we have pdStackWI
# now we can crop the pdStack data into our study extent
pdStackWI<-terra::crop(pdStackRaw, wiShp.e)
# first let's get these into the same CRS
wiTwnshpSpat<-project(as(wiTwnshpShp, "SpatVector"), crs(wiCountyShp))
# get the spat data into the same CRS
# wiTwnShpSpat<-spTransform(wiTwnShpSpat, crs(wiCountyShp.s))
wiTwnshpShp<-terra::crop(wiTwnshpSpat, wiCountyShp)
wiTwnshpShp<-as(wiTwnshpShp, "Spatial")
plot(wiTwnshpShp)
# looking at only at Iowa County
#wiCountyShp<-subset(wiCountyShp,wiCountyShp$COUNTY_NAM == "Iowa")
wiShp.e<-projectExtent(wiCountyShp, pdStackRaw)
# great now we have pdStackWI
# now we can crop the pdStack data into our study extent
pdStackWI<-terra::crop(pdStackRaw, wiShp.e)
# first let's get these into the same CRS
wiTwnshpSpat<-project(as(wiTwnshpShp, "SpatVector"), crs(wiCountyShp))
wiTwnshpShp<-as(wiTwnshpShp, "Spatial")
cumPPT <- 0
wsi.mat <- matrix(0, nrow = nrow(wiTwnshpShp), ncol=length(years))
for(i in 1:(length(years)-1)){
minDate <- paste0(years[i], "-", minDay)
maxDate <- paste0(years[i] + 1, "-", maxDay)
#if(exists)
# note can use prism_archive_verify
# or prism_archive_clean
# maybe need to change this to iterate over each day
pptRaw<-pd_stack(prism_archive_subset("ppt",
"daily",
minDate=minDate,
maxDate=maxDate))
tmaxRaw<-pd_stack(prism_archive_subset("tmax",
"daily",
minDate=minDate,
maxDate=maxDate))
tminRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
minDate=minDate,
maxDate=maxDate))
pptWI <- terra::crop(pptRaw, wiShp.e)
tmaxWI<- terra::crop(tmaxRaw, wiShp.e)
tminWI <- terra::crop(tminRaw, wiShp.e)
ppt_by_twnshp <- terra::extract(pptWI,
wiTwnshpShp,
method="bilinear")
tmax_by_twnshp <- terra::extract(tmaxWI,
wiTwnshpShp,
method="bilinear")
tmin_by_twnshp <- terra::extract(tminWI,
wiTwnshpShp,
method="bilinear")
# index for the current day
k <- 1
for(j in 1:length(ppt_by_twnshp)){
for(k in 1:length(ppt_by_twnshp[[j]][1,])){
# need to check if any of the values are NA
pptVals<-as.vector(ppt_by_twnshp[[j]][,k])
tminVals<-as.vector(tmin_by_twnshp[[j]][,k])
tmaxVals<-as.vector(tmax_by_twnshp[[j]][,k])
if(!(any(is.na(pptVals), is.na(tminVals), is.na(tmaxVals)) ||
any(is.null(pptVals), is.null(tminVals), is.null(tmaxVals)))){
# note that PRISM data is reported in MM;
# average ppt for a given township for day k
avgPPT <- mean(pptVals) / 10 # need CM divide by 10
# average min. temp for a given township for day k
avgTMin <- mean(tminVals)
avgTMax <- mean(tmaxVals)
avgTmp <- mean(c(tminVals, tmaxVals))
if(avgPPT > 0 & avgTmp <= 0){
cumPPT = cumPPT + avgPPT
}
# snow on the ground but above freezing
# TODO: this is where factors such as latitude can be taken into account
# could also take into account landscape factors here as well
# note that the measurements are in mm for precip and C for temp
# https://prism.oregonstate.edu/FAQ/#:~:text=What%20units%20are%20the%20data,want%20maps%20in%20those%20units
# if(cumPPT > 0 & avgTmp > 0){
#   # from Dawe and Boutin 2012 Journal of Wildlife Research
#   meltFactor <- (1.88 + 0.007 * avgPPT) * (1.8 * avgTmp) + 1.27
#   cumPPT = cumPPT - meltFactor # some melt factor update later with lit found
# }
if((cumPPT >= pptThrshld & avgTMin >= tminThrshld) ||
(cumPPT <= pptThrshld & avgTMin <= tminThrshld)){
wsi.mat[j,i] <- wsi.mat[j,i] + 1
}
if(cumPPT > pptThrshld & avgTMin < tminThrshld){
wsi.mat[j,i] <- wsi.mat[j,i] + 2
}
# in this case all  of the days in
# a particular township have been processed
}
}
cumPPT <- 0
}
}
months <- c(11, 12, 1, 2, 3, 4, 5)
# constants for calculating WSI
tminThrshld <- -17.7 # number used by MNDNR
tmaxThrshld <- 0
pptThrshld <- 38 # 38 cm cited
# can set our month condition here for different measures of WSI
minDay <- '12-01' # december 1
maxDay <- '04-30' # April 30
# need some spring date threshold
# these are for the WSI index; for year n-1
# NOTE start testing at 2017
# years<-c(seq(2001,2022,1))
years<-c(seq(2001, 2002, 1))
# DON'T DELETE; only for getting
pdStackRaw<-pd_stack(prism_archive_subset("ppt",
"monthly",
years=2001))
# now we need to reproject these into the same CRS
# looking at only at Iowa County
#wiCountyShp<-subset(wiCountyShp,wiCountyShp$COUNTY_NAM == "Iowa")
wiShp.e<-projectExtent(wiCountyShp, pdStackRaw)
# great now we have pdStackWI
# now we can crop the pdStack data into our study extent
pdStackWI<-terra::crop(pdStackRaw, wiShp.e)
# first let's get these into the same CRS
wiTwnshpSpat<-project(as(wiTwnshpShp, "SpatVector"), crs(wiCountyShp))
months <- c(11, 12, 1, 2, 3, 4, 5)
# constants for calculating WSI
tminThrshld <- -17.7 # number used by MNDNR
tmaxThrshld <- 0
pptThrshld <- 38 # 38 cm cited
# can set our month condition here for different measures of WSI
minDay <- '12-01' # december 1
maxDay <- '04-30' # April 30
# need some spring date threshold
# these are for the WSI index; for year n-1
# NOTE start testing at 2017
# years<-c(seq(2001,2022,1))
years<-c(seq(2001, 2002, 1))
# DON'T DELETE; only for getting
pdStackRaw<-pd_stack(prism_archive_subset("ppt",
"monthly",
years=2001))
# now we need to reproject these into the same CRS
# looking at only at Iowa County
#wiCountyShp<-subset(wiCountyShp,wiCountyShp$COUNTY_NAM == "Iowa")
wiShp.e<-projectExtent(wiCountyShp, pdStackRaw)
# great now we have pdStackWI
# now we can crop the pdStack data into our study extent
pdStackWI<-terra::crop(pdStackRaw, wiShp.e)
# first let's get these into the same CRS
wiTwnshpSpat<-project(as(wiTwnshpShp, "SpatVector"), crs(wiCountyShp))
setwd("C:/Users/jackx/Desktop/writing-sample")
setwd("C:/Users/jackx/Desktop/cwd-project-2")
library("rgdal")
library("raster")
library("sf")
library("leafsync")
library("dplyr")
library("ggplot2")
library("stars")
library(spatialEco)
library(spatstat.random)
library(data.table)
library(geoR)
library(RColorBrewer)
library(spdep)
library(spatialreg)
library(classInt)
library(rgeos)
library(landscapemetrics)
library(nimble)
library(coda)
library(prism)
library(terra)
library(maps)
library(raster)
wiShp<-st_read("./data/shapefiles/Wisconsin_State_Boundary_24K/Wisconsin_State_Boundary_24K.shp")
wiTwnshpShp <- st_read("./data/shapefiles/PLSS_Townships/PLSS_Townships.shp")
prism_set_dl_dir("C:\\Users\\jackx\\Desktop\\prism-dat-f", create=FALSE)
#prism_get_dl_dir(path="C:\\Users\\jackx022\\Desktop\\prism-dat-f")
pdStackRaw<-pd_stack(prism_archive_subset("tmin",
"daily",
mon=c(11, 12, 1, 2, 3, 4, 5),
years=1999))
# make copy
pdStackR <- pdStackRaw
# wiShp<-st_read("./data/shapefiles/PLSS_Townships/PLSS_Townships.shp")
wiCountyShp <- st_read("./data/shapefiles/County_Boundaries_24K/County_Boundaries_24K.shp")
crs(wiShp)
wiShp.e<-projectExtent(wiShp, pdStackR)
# pdStackR<-transform(pdStackR,crs(wiCountySpat))
# great now we have pdStackWI
pdStackWI<-terra::crop(pdStackR, wiShp.e)
# first let's get these into the same CRS
wiTwnShpSpat<-as(wiTwnshpShp, "Spatial")
# get the spat data into the same CRS
wiTwnShpSpat<-spTransform(wiTwnShpSpat, CRS(pdStackR))
wiShp.e<-projectExtent(wiShp, pdStackR)
# pdStackR<-transform(pdStackR,crs(wiCountySpat))
# great now we have pdStackWI
pdStackWI<-terra::crop(pdStackR, wiShp.e)
# first let's get these into the same CRS
wiTwnShpSpat<-as(wiTwnshpShp, "Spatial")
# get the spat data into the same CRS
# project to the same CRS
wiTwnShpSpat<-spTransform(wiTwnShpSpat, crs(pdStackWI))
# now we want to make a spatialPolygonsDataFrame
tmin_by_twnshp <- terra::extract(pdStackWI, wiTwnShpSpat)
wiTwnShpSpat$avg_tmin <- 0
wiTwnshpShp$avg_tmin <- 0
for(i in 1:nrow(wiTwnshpShp)){
wiTwnshpShp[i,]$avg_tmin = mean(tmin_by_twnshp[[i]])
}
plot(wiTwnshpShp[,14], max.plot=13)
